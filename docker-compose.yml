version: '3.8'

services:
  # Main application service
  indobert-cs:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: indobert-document-cs
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - TOKENIZERS_PARALLELISM=false
      - TRANSFORMERS_CACHE=/app/models/cache
      - HF_DATASETS_CACHE=/app/models/cache/datasets
      - WANDB_DISABLED=true
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - indobert-network

  # Development service (alternative to production)
  indobert-cs-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: indobert-document-cs-dev
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - TOKENIZERS_PARALLELISM=false
      - TRANSFORMERS_CACHE=/app/models/cache
      - HF_DATASETS_CACHE=/app/models/cache/datasets
    volumes:
      - .:/app
      - ./models/cache:/app/models/cache
    networks:
      - indobert-network
    profiles:
      - dev

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: indobert-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - indobert-network
    profiles:
      - with-redis

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: indobert-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - indobert-cs
    restart: unless-stopped
    networks:
      - indobert-network
    profiles:
      - with-nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: indobert-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - indobert-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: indobert-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - indobert-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  indobert-network:
    driver: bridge

# Additional compose files for different environments
---
# docker-compose.override.yml (for development)
version: '3.8'

services:
  indobert-cs:
    build:
      target: development
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - LOG_LEVEL=DEBUG
    command: ["uvicorn", "src.api_server:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

---
# docker-compose.prod.yml (for production)
version: '3.8'

services:
  indobert-cs:
    build:
      target: production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - TIMEOUT=120
    command: ["gunicorn", "src.api_server:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--max-requests", "1000", "--timeout", "120"]
